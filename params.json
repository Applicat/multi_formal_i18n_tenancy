{"body":"# MultiFormalI18nTenancy [![multi_formal_i18n_tenancy @ Travis-CI.org](https://secure.travis-ci.org/Applicat/multi_formal_i18n_tenancy.png)](http://travis-ci.org/Applicat/multi_formal_i18n_tenancy) [![multi_formal_i18n_tenancy @ CodeClimate.com](https://codeclimate.com/badge.png)](https://codeclimate.com/github/Applicat/multi_formal_i18n_tenancy) [![multi_formal_i18n_tenancy @ Gemnasium.com](https://gemnasium.com/Applicat/multi_formal_i18n_tenancy.png?travis)](https://gemnasium.com/Applicat/multi_formal_i18n_tenancy)\r\n\r\nThis gem extends the standard i18n backend (I18n::Backend::Simple) to introduce {Conventions over configuration}[http://en.wikipedia.org/wiki/Convention_over_configuration] about 2 new types of locale files:\r\n\r\n<b>*_formal.yml</b>\r\n\r\nGiven you want to offer your users the option to be addressed formally or informally through a session locale switch: \r\n\r\nI18n.locale = :de # or :de_formal\r\n\r\nSo this is a {DRY}[http://en.wikipedia.org/wiki/Don%27t_repeat_yourself] solution for the workaround about having duplication of de locales in the de_formal namespace even though informal & formal translation are the same.\r\n\r\nThis locale file owns all translations from its base *.yml and lets you override them through the same translation keys (except of the deviant locale namespaces de and de_formal at the beginning).\r\n\r\n<b>#{locales_path}/tenants/your_tenant_name/**/your_tenant_name.yml</b>\r\n\r\nGiven you want to have tenant specific locales through a session locale switch:\r\n\r\nI18n.locale :your_tenant_name_de # or :your_tenant_name_de_formal\r\n\r\n('Your Tenant Name'.parameterize.gsub('-', '_') + '_de').to_sym == :your_tenant_name_de\r\n\r\n<strong>Precondition:</strong> Assure that you recursively add locale files to i18n's locale path e.g. through your Rails 3 application.rb:\r\n\r\n  config.i18n.load_path += Dir[Rails.root.join('config', 'locales', '**', '*.{rb,yml}').to_s]\r\n\r\nThis locale file owns all translations from its base *.yml and optional *_formal.yml under #{locales_path}/tenants/your-tenant-name/ (recurively) and lets you override them through the same translation keys (except of the deviant locale namespaces de and de_formal at the beginning).\r\n\r\n## Installation\r\n\r\nAdd this to your Gemfile and run the +bundle+ command.\r\n\r\n  gem \"multi_formal_i18n_tenancy\"\r\n  \r\nThe gem (= engine) will automatically set the backend for your Rails application.\r\n\r\nOPTIONAL: you have to manually set the i18n backend for your non-rails Ruby application:\r\n\r\n  I18n.backend = MultiFormalI18nTenancy::Backend.new\r\n  \r\n## Wiki Docs\r\n\r\n* {Modules}[https://github.com/Applicat/multi_formal_i18n_tenancy/wiki/modules]\r\n\r\n## Compatibility\r\n\r\nTested on MacOS with: Rails 3.1 & Ruby 1.9.2, Rails 3.2.6 & Ruby 1.9.3.\r\n\r\n## Future\r\n\r\n* Support of more backends than only the standard simple one\r\n\r\n## Contribution\r\n\r\nJust follow the screencast of Ryan Bates on railscasts.com: \r\n\r\n  http://railscasts.com/episodes/300-contributing-to-open-source\r\n\r\nAdd a description about your changes to CHANGELOG.md under section multi_formal_i18n_tenancy (unreleased).\r\n\r\n## License \r\n\r\nThis project uses MIT-LICENSE.","tagline":"Your formal locales will inherit translations from their base locale and locales stored in an enterprise folder can override base + formal translations","name":"Multi formal i18n tenancy","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}